openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      summary: index entry point
      parameters: []
      responses:
        '200':
          description: hello message
      tags:
        - Index
  /user:
    post:
      operationId: UserController_create
      summary: Create user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
        - User
    get:
      operationId: UserController_findAll
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      tags:
        - User
  /user/{id}:
    get:
      operationId: UserController_findOne
      summary: Get user with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
        - User
    put:
      operationId: UserController_update
      summary: Update user with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags:
        - User
    delete:
      operationId: UserController_remove
      summary: Delete user with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - User
  /artist:
    post:
      operationId: ArtistController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: ''
    get:
      operationId: ArtistController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /artist/{id}:
    get:
      operationId: ArtistController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    patch:
      operationId: ArtistController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: ArtistController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /track:
    post:
      operationId: TrackController_create
      summary: Create track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
      tags:
        - Track
    get:
      operationId: TrackController_findAll
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
      tags:
        - Track
  /track/{id}:
    get:
      operationId: TrackController_findOne
      summary: Get track with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
      tags:
        - Track
    put:
      operationId: TrackController_update
      summary: Update track with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
      tags:
        - Track
    delete:
      operationId: TrackController_remove
      summary: Delete track with id
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '204':
          description: ''
      tags:
        - Track
  /album:
    post:
      operationId: AlbumController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: ''
    get:
      operationId: AlbumController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /album/{id}:
    get:
      operationId: AlbumController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    patch:
      operationId: AlbumController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: AlbumController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
  /favs:
    post:
      operationId: FavsController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFavDto'
      responses:
        '201':
          description: ''
    get:
      operationId: FavsController_findAll
      parameters: []
      responses:
        '200':
          description: ''
  /favs/{id}:
    get:
      operationId: FavsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
    patch:
      operationId: FavsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFavDto'
      responses:
        '200':
          description: ''
    delete:
      operationId: FavsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
info:
  title: NodeJS2024Q1-Service
  description: 'Home Library Service : Tast7'
  version: 1.0.0
  contact: {}
tags:
  - name: Mamont Studio
    description: ''
servers: []
components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        login:
          type: string
        version:
          type: number
        createdAt:
          type: number
        updatedAt:
          type: number
      required:
        - id
        - login
        - version
        - createdAt
        - updatedAt
    UpdatePasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    CreateArtistDto:
      type: object
      properties: {}
    UpdateArtistDto:
      type: object
      properties: {}
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: number
      required:
        - name
        - artistId
        - albumId
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: number
      required:
        - id
        - name
        - artistId
        - albumId
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
          nullable: true
        albumId:
          type: string
          format: uuid
          nullable: true
        duration:
          type: number
      required:
        - name
        - artistId
        - albumId
        - duration
    CreateAlbumDto:
      type: object
      properties: {}
    UpdateAlbumDto:
      type: object
      properties: {}
    CreateFavDto:
      type: object
      properties: {}
    UpdateFavDto:
      type: object
      properties: {}
